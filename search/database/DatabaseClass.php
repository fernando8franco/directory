<?php

/**
 * Simple MySQL Database Connection Class
 * 
 * This class provides basic functionality to connect to a MySQL database,
 * execute queries, and properly close the connection.
 */
class Database {
    private $host;
    private $username;
    private $password;
    private $database;
    private $connection;

    /**
     * Constructor - initializes database connection parameters
     * 
     * @param string $host     Database host address
     * @param string $username Database username
     * @param string $password Database password
     * @param string $database Database name
     */
    public function __construct($host, $username, $password, $database) {
        $this->host = $host;
        $this->username = $username;
        $this->password = $password;
        $this->database = $database;
        $this->connect();
    }

    /**
     * Establishes connection to the database
     */
    private function connect() {
        try {
            $this->connection = new mysqli($this->host, $this->username, $this->password, $this->database);
            
            if ($this->connection->connect_error) {
                throw new Exception("Connection failed: " . $this->connection->connect_error);
            }
        } catch (Exception $e) {
            die("Database connection error: " . $e->getMessage());
        }
    }

    /**
     * Executes a SELECT query and returns the result
     * 
     * @param string $query SQL query to execute
     * @return mysqli_result|false Result set or false on failure
     */
    public function select($query) {
        $result = $this->connection->query($query);
        if (!$result) {
            die("Query failed: " . $this->connection->error);
        }
        return $result;
    }

    /**
     * Executes an INSERT, UPDATE, or DELETE query
     * 
     * @param string $query SQL query to execute
     * @return bool True on success, false on failure
     */
    public function execute($query) {
        $result = $this->connection->query($query);
        if (!$result) {
            die("Query failed: " . $this->connection->error);
        }
        return $result;
    }

    /**
     * Prepares and executes a query with parameters to prevent SQL injection
     * 
     * @param string $query SQL query with placeholders
     * @param string $types Types of parameters (i for integer, s for string, d for double, b for blob)
     * @param array $params Array of parameters to bind
     * @return mysqli_stmt|false Statement object or false on failure
     */
    public function preparedQuery($query, $types, $params) {
        $stmt = $this->connection->prepare($query);
        if (!$stmt) {
            die("Prepare failed: " . $this->connection->error);
        }
        
        $stmt->bind_param($types, ...$params);
        $stmt->execute();
        
        return $stmt;
    }

    /**
     * Escapes special characters in a string for use in an SQL statement
     * 
     * @param string $string The string to be escaped
     * @return string The escaped string
     */
    public function escapeString($string) {
        return $this->connection->real_escape_string($string);
    }

    /**
     * Gets the ID generated by the last INSERT query
     * 
     * @return int|string The last ID generated
     */
    public function getLastInsertId() {
        return $this->connection->insert_id;
    }

    /**
     * Gets the number of affected rows in the last query
     * 
     * @return int Number of affected rows
     */
    public function getAffectedRows() {
        return $this->connection->affected_rows;
    }

    /**
     * Closes the database connection
     */
    public function close() {
        if ($this->connection) {
            $this->connection->close();
        }
    }

    /**
     * Destructor - ensures connection is closed when object is destroyed
     */
    public function __destruct() {
        $this->close();
    }
}